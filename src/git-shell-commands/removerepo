#!/usr/bin/env python3
#HELP [private|public] [REPO_NAME] remove a git repo

import sys
from pathlib import Path
import shutil

from utility import PRIVATE_REPO_ROOT, PUBLIC_REPO_ROOT, UserInterface

def main():
    # Check arguments
    if len(sys.argv) != 3 or sys.argv[1] not in {"private", "public"}:
        print(f"Usage: {Path(sys.argv[0]).name} [private|public] REPO_NAME")
        sys.exit(1)
    
    repo_type = sys.argv[1]
    repo_name_clean = sys.argv[2]
    repo_name = f"{repo_name_clean}.git"

    # Create repository path based on type
    repo_root = PUBLIC_REPO_ROOT if repo_type == "public" else PRIVATE_REPO_ROOT
    git_repo = Path(repo_root) / repo_name
    
    # Check if repository exists
    if not git_repo.exists():
        UserInterface().print_error_and_exit("Repository does not exist!")
    
    # Confirm it's a git repository
    if not (git_repo / 'config').exists():
        UserInterface().print_error_and_exit("Not a valid git repository!")
    
    # Remove the repository
    try:
        shutil.rmtree(git_repo)
        UserInterface().print_success(f"Repository '{repo_type}/{repo_name_clean}' has been removed.")
    except Exception as e:
        UserInterface().print_error_and_exit(f"Failed to remove repository: {e}")

if __name__ == '__main__':
    main()